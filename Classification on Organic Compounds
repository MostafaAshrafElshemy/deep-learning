# -*- coding: utf-8 -*-
"""classification-on-organic-compounds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/MostafaElshemy/5ae86b7d2dbc54b275d75dbbe6a4373f/classification-on-organic-compounds.ipynb
"""

!wget -N "https://cainvas-static.s3.amazonaws.com/media/user_data/cainvas-admin/musk.csv"

# Import the required libraries
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt

# read the csv file
dataset = pd.read_csv('musk.csv')
dataset.head()

"""#Data Preprocessing¶

"""

X = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:, -1].values

# Scaling
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X = ss.fit_transform(X)

"""#Split the data for training and testing¶

"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

X_train.shape,y_train.shape

"""#Build and train the model¶

"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(33, input_shape=(166,),
                          activation=tf.nn.tanh),
    tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)
])
model.summary()
# compile
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 15)

# Save the model
model.save("Simple ANN.h5")

"""#Plots¶

"""

# train_loss vs Val_loss
from matplotlib import pyplot as plt
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

# train_accuracy vs val_accuracy
from matplotlib import pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('acc')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

# accuracy and loss
model.evaluate(X_test, y_test)

"""#Predictions and Accuracy¶

"""

y_pred = model.predict(X_test)
y_pred[5:10]

y_pred1 = []
for element in y_pred:
    if element > 0.5:
        y_pred1.append(1)
    else:
        y_pred1.append(0)

y_pred1[25:40]

y_test[25:40]

# print the classification report
from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test,y_pred1))

"""#Heat Map¶

"""

import seaborn as sn

cm = tf.math.confusion_matrix(labels = y_test, predictions = y_pred1)

plt.figure(figsize = (10,8))
sn.heatmap(cm, annot = True, fmt = 'd')
plt.xlabel("predicted")
plt.ylabel("actual")

!deepCC "Simple ANN.h5"
