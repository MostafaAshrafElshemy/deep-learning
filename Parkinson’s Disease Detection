Parkinsonâ€™s Disease Detection
# -*- coding: utf-8 -*-
"""parkinson-s-disease-detection-ml (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E9r-W01Zq3GhnhxxAOIdBngfbVcgzCv8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('darkgrid')

data = pd.read_csv("/kaggle/input/parkinsons-disease-data-set/parkinsons.data", sep=',') # assign index column to name
data.head()

data.info()

data.describe()

data['status'].value_counts().plot(kind='pie', autopct = "%1.0f%%")
plt.title("Distribution in the 'status' Column")
plt.show()

data.hist(figsize=(15,12));

print("Original shape of data: ", data.shape)
x = data.drop(['status','name'], axis=1)
print("Features shape:", x.shape)
y = data.status
print("Target shape: ", y.shape)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler((-1, 1))
# fits the data to the MinMaxScaler
X = scaler.fit_transform(x)
X

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(X, y, test_size=0.2)

from sklearn.linear_model import LogisticRegression
# Importing the Logistic Regression and creating an instance of it
clf = LogisticRegression()
#Train Model
clf.fit(x_train, y_train)


# Prediction on Test and Train Set
pred_logistic_test = clf.predict(x_test)
print(pred_logistic_test)
pred_logistic_train = clf.predict(x_train)
print(pred_logistic_train)

from sklearn.metrics import confusion_matrix,accuracy_score, classification_report
print("Training Accuracy: ", accuracy_score(y_train, pred_logistic_train))

print("Test Accuracy: ", accuracy_score(y_test, pred_logistic_test))

cm = confusion_matrix(y_test, pred_logistic_test)
ax= plt.subplot()
sns.heatmap(cm, annot=True, ax = ax);
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')
ax.set_title('Confusion Matrix')
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, pred_logistic_test))

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
# Train model
dt.fit(x_train, y_train)


pred_dt_test = dt.predict(x_test)
pred_dt_train = dt.predict(x_train)
# Making predictions using the data


print("Training Accuracy: ", accuracy_score(y_train, pred_dt_train))
print("Test Accuracy: ", accuracy_score(y_test, pred_dt_test))

cm = confusion_matrix(y_test, pred_dt_test)
ax= plt.subplot()
sns.heatmap(cm, annot=True, ax = ax);
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')
ax.set_title('Confusion Matrix')
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, pred_dt_test))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(x_train, y_train)


train_pred_rf = rf.predict(x_train)
pred_rf = rf.predict(x_test)


print("Training Accuracy: ",accuracy_score(y_train, train_pred_rf))
print("Test Accuracy: ",accuracy_score(y_test, pred_rf))

cm = confusion_matrix(y_test, pred_rf)
ax= plt.subplot()
sns.heatmap(cm, annot=True, ax = ax);
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')
ax.set_title('Confusion Matrix')
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, pred_rf))

from sklearn.ensemble import GradientBoostingClassifier
gb = GradientBoostingClassifier()
# Training model
gb.fit(x_train, y_train)

# Prediction on test and train set
gb_pred_train = gb.predict(x_train)
gb_pred = gb.predict(x_test)


print("Training Accuracy: ",accuracy_score(y_train, gb_pred_train))
print("Test Accuracy: ", accuracy_score(y_test, gb_pred))

cm = confusion_matrix(y_test, gb_pred)
ax= plt.subplot()
sns.heatmap(cm, annot=True, ax = ax);
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')
ax.set_title('Confusion Matrix')
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, gb_pred))
