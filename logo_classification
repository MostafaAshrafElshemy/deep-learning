# -*- coding: utf-8 -*-
"""logo_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X2vLiB7nzdhZFF3rbGlgPHOz6YWIYLnV

#We will import all the required libraries¶
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import backend as K
from tensorflow.keras.layers import Dense, Activation,Dropout,Conv2D, MaxPooling2D,BatchNormalization, Flatten
from tensorflow.keras.optimizers import Adam, Adamax
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras import regularizers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model, load_model, Sequential
import numpy as np
import pandas as pd
import shutil
import time
import cv2 as cv2
from tqdm import tqdm
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow
import os
import seaborn as sns
sns.set_style('darkgrid')
from PIL import Image
from sklearn.metrics import confusion_matrix, classification_report
from IPython.core.display import display, HTML

"""#Unzip the dataset so that we can use it in our notebook¶

"""

!wget https://cainvas-static.s3.amazonaws.com/media/user_data/cainvas-admin/logos3.zip
!unzip -qo logos3.zip

# zip folder is not needed anymore
!rm logos3.zip

"""#Map the classifications i.e. classes to an integer and display the list of all unique 6 brands.¶

"""

directory = "logos3/train"
Name=[]
for file in os.listdir(directory):
    Name+=[file]
print(Name)
print(len(Name))
brand_map = dict(zip(Name, [t for t in range(len(Name))]))
print(brand_map)
r_brand_map=dict(zip([t for t in range(len(Name))],Name))

"""#Displaying some images from our dataset.¶

"""

Brand = 'logos3/train/Starbucks'
import os
sub_class = os.listdir(Brand)
fig = plt.figure(figsize=(10,5))
for e in range(len(sub_class[:10])):
  plt.subplot(2,5,e+1)
  img = plt.imread(os.path.join(Brand,sub_class[e]))
  plt.imshow(img, cmap=plt.get_cmap('gray'))
  plt.axis('off')

img_datagen = ImageDataGenerator(rescale=1./255, vertical_flip=True, horizontal_flip=True,
                                 rotation_range=40, width_shift_range=0.2,
                                 height_shift_range=0.2,zoom_range=0.1, validation_split=0.2)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = img_datagen.flow_from_directory(directory, shuffle=True,
                                                  batch_size=32, subset='training', target_size=(100, 100))

model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(3,3),input_shape=(100,100,3), activation='relu', padding = 'same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding = 'same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding = 'same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding = 'same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding = 'same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))
model.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding = 'same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(256))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(6))
# model.add(Dense(len(brand_map)))
model.add(Activation('softmax'))
model.summary()

#validation_data =  ImageDataGenerator(rescale=1./255)

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_generator,

                    batch_size= 32,epochs=50)

plt.plot(history.history['accuracy'])
plt.plot(history.history['loss'])
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and validation accuracy')
plt.show()

# from tensorflow.keras.models import load_img
from tensorflow.keras.preprocessing.image import load_img
load_img("logos3/test/McDonalds/armada_image_755.jpg",target_size=(180,180))

# from tensorflow.keras import image
from tensorflow.keras.preprocessing import image
test_image = image.load_img('logos3/test/KFC/armada_image_169.jpg', target_size = (100, 100))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = model.predict(test_image)
print(result)
